@page "/edit-order"
@page "/edit-order/{orderId}"
@using SalesOrderManager.Shared.Models;
@inject HttpClient Http;
@inject NavigationManager Navigator;
@inject IJSRuntime JsRuntime;
@inject IToastService ToastService;

<section>
    <p class="fw-bold">Edit Order</p>
    <hr />
    <div class="col-md-6 border rounded p-3">
        <div class="form-group pb-3">
            <label for="orderName">Name</label>
            <input type="text" class="form-control" id="orderName" @bind="order.Name" />
        </div>
        <div class="form-group pb-3">
            <label for="orderName">State</label>
            <input type="text" class="form-control" id="orderState" @bind="order.State" />
        </div>
        <button class="btn btn-primary" type="button" @onclick="()=> UpdateOrder()">Update</button>
    </div>
</section>

<section>
    <div class="col-md-6 border rounded p-3 mt-3">
        <a href="#" class="btn btn-outline-primary" @onclick="ToggleWindowCollapse" @onclick:preventDefault>Add Window</a>
        @if (!IsWindowCollapsed)
        {
            <div class="form-group pb-3 pt-3">
                <label for="windowName">Window Name</label>
                <input type="text" class="form-control" id="windowName" @bind="window.Name" />
            </div>
            <div class="form-group pb-3">
                <label for="quantityOfWindows">Quantity of Windows</label>
                <input type="number" class="form-control" id="quantityOfWindows" @bind="window.QuantityOfWindows" />
            </div>
            <div class="form-group pb-3">
                <label for="totalSubElements">Total Subelements</label>
                <input type="number" class="form-control" id="totalSubElements" @bind="window.TotalSubElements" />
            </div>
            <button type="button" class="btn btn-primary" @onclick="SaveWindow">Save</button>
        }
    </div>
</section>

<section>
    <p class="mt-md-5 fw-bold">Windows</p>
    <hr />
    <div>
        @if (order.Windows?.Count <= 0)
        {
            <p>No windows found.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Quantity Of Windows</th>
                        <th>Total Subelements</th>
                        <th>Delete</th>
                        <th>Add Subelement</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var window in order.Windows.ToList())
                    {
                        <tr>
                            <td>@window.Name</td>
                            <td>@window.QuantityOfWindows</td>
                            <td>@window.TotalSubElements</td>
                            <td>
                                <button @onclick="(()=> DeleteWindow(window.Id))" class="btn btn-outline-danger">Delete</button>
                            </td>
                            <td>
                                <button @onclick="(()=> SetWindow(window.Id))" class="btn btn-outline-danger">Add</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</section>

<section>

    @if (!IsSubelementCollapsed)
    {
        <a href="#" class="btn btn-outline-primary" @onclick="ToggleSubelementCollapse" @onclick:preventDefault>Hide View</a>
        if (order.Windows.Count > 0)
        {
            <div class="col-md-6 border rounded p-3 mt-3">
                <p class="fw-bold">Add Subelement</p>
                <hr />
                <div class="form-group mb-3">
                    <label for="windowId">Window</label>
                    <select class="form-control" id="windowId" @bind="subElement.WindowId">
                        <option value="">Select a Window</option>
                        @foreach (var window in order.Windows)
                        {
                            <option value="@window.Id">@window.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="element">Element</label>
                    <input type="number" class="form-control" id="element" @bind="subElement.Element" />
                </div>
                <div class="form-group mb-3">
                    <label for="type">Type</label>
                    <input type="text" class="form-control" id="type" @bind="subElement.Type" />
                </div>
                <div class="form-group mb-3">
                    <label for="width">Width</label>
                    <input type="number" class="form-control" id="width" @bind="subElement.Width" />
                </div>
                <div class="form-group mb-3">
                    <label for="height">Height</label>
                    <input type="number" class="form-control" id="height" @bind="subElement.Height" />
                </div>
                <button type="button" class="btn btn-primary" @onclick="SaveSubelement">Save</button>
            </div>
        }
    }
</section>

<section>
    <p class="mt-md-5 fw-bold">Subelements</p>
    <hr />
    <div>
        @if (order.Windows?.Count <= 0)
        {
            <p>No subelements found.</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Window Name</th>
                        <th>Element</th>
                        <th>Type</th>
                        <th>Width</th>
                        <th>Height</th>
                        <th>Update</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var window in order.Windows.ToList())
                    {
                        @foreach (var subelement in window.SubElements)
                        {
                            <tr>
                                <td>@window.Name</td>
                                <td>@subelement.Element</td>
                                <td>@subelement.Type</td>
                                <td>
                                    <input type="number" class="form-control" @bind="subelement.Width" />
                                </td>
                                <td>
                                    <input type="number" class="form-control" @bind="subelement.Height" />
                                </td>
                                <td>
                                    <button @onclick="()=> UpdateSubelement(subelement)" class="btn btn-outline-primary">Update</button>
                                </td>
                                <td>
                                    <button @onclick="(()=> DeleteSubElement(subelement.Id))" class="btn btn-outline-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
</section>

@code {

    [Parameter]
    public string orderId { get; set; }
    private Order order = new Order() { Windows = new List<Window>() };
    private Window window = new Window();
    private SubElement subElement = new SubElement();
    private bool IsWindowCollapsed { get; set; } = true;
    private bool IsSubelementCollapsed { get; set; } = true;

    private void ToggleWindowCollapse()
    {
        IsWindowCollapsed = !IsWindowCollapsed;
    }

    private void ToggleSubelementCollapse()
    {
        IsSubelementCollapsed = !IsSubelementCollapsed;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        order = await Http.GetFromJsonAsync<Order>($"api/Order/{orderId}");
    }

    private void SetWindow(int windowId)
    {
        subElement.WindowId = windowId;
        if (IsSubelementCollapsed) IsSubelementCollapsed = false;
    }

    private async Task UpdateOrder()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            if (!IsValidOrder()) return;
            var response = await Http.PutAsJsonAsync($"api/order", order);
            response.EnsureSuccessStatusCode();
            ToastService.ShowSuccess("The order has been updated successfully.");
            await LoadData();
        }
    }

    private bool IsValidOrder()
    {
        if (string.IsNullOrEmpty(order.Name))
        {
            ToastService.ShowWarning("Order name can't be empty.");
            return false;
        }

        if (string.IsNullOrEmpty(order.State))
        {
            ToastService.ShowWarning("Order state can't be empty.");
            return false;
        }
        return true;
    }

    private async Task SaveWindow()
    {
        if (!IsValidWindow()) return;
        window.OrderId = Convert.ToInt32(orderId);
        var response = await Http.PostAsJsonAsync("api/window", window);
        response.EnsureSuccessStatusCode();
        ToastService.ShowSuccess("The window has been added successfully.");
        window = new Window();
        await LoadData();
    }

    private bool IsValidWindow()
    {
        if (string.IsNullOrEmpty(window.Name))
        {
            ToastService.ShowWarning("Window name can't be empty.");
            return false;
        }

        if (window.QuantityOfWindows <= 0)
        {
            ToastService.ShowWarning("Quantity of windows must be greater than zero.");
            return false;
        }

        if (window.TotalSubElements <= 0)
        {
            ToastService.ShowWarning("Total subelements must be greater than zero.");
            return false;
        }

        return true;
    }

    private async Task SaveSubelement()
    {
        if (!IsValidSubelement()) return;
        var response = await Http.PostAsJsonAsync("api/subelement", subElement);
        response.EnsureSuccessStatusCode();
        ToastService.ShowSuccess("The subelement has been added successfully.");
        subElement = new SubElement();
        await LoadData();
    }

    private bool IsValidSubelement()
    {
        if (subElement.Element <= 0)
        {
            ToastService.ShowWarning("Element must be greater than zero.");
            return false;
        }

        if (string.IsNullOrEmpty(subElement.Type))
        {
            ToastService.ShowWarning("Type can't be empty.");
            return false;
        }

        if (subElement.Width <= 0)
        {
            ToastService.ShowWarning("Width must be greater than zero.");
            return false;
        }

        if (subElement.Height <= 0)
        {
            ToastService.ShowWarning("Height must be greater than zero.");
            return false;
        }

        var window = order.Windows.FirstOrDefault(x => x.Id == subElement.WindowId);

        if (window.SubElements.Count == window.TotalSubElements)
        {
            ToastService.ShowWarning($"You are not allowed to add more than {window.TotalSubElements} subelement(s) for this window.");
            return false;
        }

        return true;
    }

    private async Task DeleteWindow(int windowId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "All the subelements associated with the window will aslo be deleted. Are you sure?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/window/{windowId}");
            response.EnsureSuccessStatusCode();
            ToastService.ShowSuccess("The window has been deleted successfully.");
            await LoadData();
        }
    }

    private async Task DeleteSubElement(int subelementId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/subelement/{subelementId}");
            response.EnsureSuccessStatusCode();
            ToastService.ShowSuccess("The subelement has been deleted successfully.");
            await LoadData();
        }
    }

    private async Task UpdateSubelement(SubElement subelement)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var response = await Http.PutAsJsonAsync($"api/subelement", subelement);
            response.EnsureSuccessStatusCode();
            ToastService.ShowSuccess("The subelement has been updated successfully.");
            await LoadData();
        }
    }
}
